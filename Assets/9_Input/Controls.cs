//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/9_Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Gameplay_Player"",
            ""id"": ""7ff99b73-fde6-421f-bfb3-96f9ce780fb5"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""ecf32bd7-fdf5-4e23-abf7-41e1805ef294"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""e324ef34-c561-43bd-923c-5bbc52c4aa93"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""959cffe8-def3-4516-b5bc-8a7fd47215a0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""a01da8a8-f8f4-4a7d-853b-bbe9c359bc09"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ff898898-c253-46c1-a5af-d9e843a0ce7e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4bbadc12-545b-4d78-94e2-bcc77be3f9d2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b6ded12f-7dbe-4776-b7bb-eaeb8567ddeb"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""89c037f5-d151-42ba-95d3-b40b0f2446c0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ea6e4827-381a-4c1f-907d-98b72c621f78"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a5d6347b-57b2-4d32-943b-44034ba75b3d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Gameplay_UI_Hotbar"",
            ""id"": ""31562982-cf87-4266-943d-ba1f13ee1e76"",
            ""actions"": [
                {
                    ""name"": ""Scroll Slots"",
                    ""type"": ""Value"",
                    ""id"": ""d9e442ce-f169-405b-9f2e-ee4e7bf95902"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": ""Clamp(min=-1,max=1)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Select Slot 1"",
                    ""type"": ""Button"",
                    ""id"": ""ce56183f-cb14-434e-9237-099773ab4014"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Slot 2"",
                    ""type"": ""Button"",
                    ""id"": ""6f973535-2ade-4e47-a7b0-5deb486de15e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Slot 3"",
                    ""type"": ""Button"",
                    ""id"": ""5908deb9-dcca-45e4-b386-e901a52d75ef"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Slot 4"",
                    ""type"": ""Button"",
                    ""id"": ""79163c7e-5160-4a39-b8bc-39c2c35690d6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Slot 5"",
                    ""type"": ""Button"",
                    ""id"": ""c935620d-4874-4b0c-a86e-177e466c796b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Slot 6"",
                    ""type"": ""Button"",
                    ""id"": ""c51e4133-6b50-4990-b79e-7b812bbec5d8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Slot 7"",
                    ""type"": ""Button"",
                    ""id"": ""cadba6a7-8840-43ed-b3ab-36c68f181aff"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Slot 8"",
                    ""type"": ""Button"",
                    ""id"": ""e7758244-5fde-412f-b9db-56e72b27a80d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Slot 9"",
                    ""type"": ""Button"",
                    ""id"": ""4c85e561-eaaa-4f6a-aed6-d806dd3696e7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Slot 10"",
                    ""type"": ""Button"",
                    ""id"": ""92397b33-30ed-4c31-b35a-700c38d3c4e6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""5dce5bf7-f488-4ef4-8e0a-aa209281cd18"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll Slots"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""5b957813-bfb6-421c-a9f2-906c6363133c"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll Slots"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""269736a3-ad96-4e49-a7a7-08fc89475cf2"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll Slots"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""332b7b3b-1dae-417c-b795-7befa089849e"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Slot 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eae7686c-5130-4cc1-a262-d257ccf19ba0"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Slot 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""824b4eec-87f8-4c3e-83ac-c67271587c7c"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Slot 3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bc91dc1e-9b8a-42b5-9568-a1697bddc04b"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Slot 4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d5494e2-1a2e-4e32-a152-0031afab98d5"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Slot 5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c85a4263-85b8-4681-8c8c-00669ff278d6"",
                    ""path"": ""<Keyboard>/6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Slot 6"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c9d3aaf-f6bd-4a1d-b01d-264b0f07f2d0"",
                    ""path"": ""<Keyboard>/7"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Slot 7"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8b166e51-66d3-4477-bcd0-b286346c43e6"",
                    ""path"": ""<Keyboard>/8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Slot 8"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""34a39484-f5a3-460b-b00a-dd063aed7e88"",
                    ""path"": ""<Keyboard>/9"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Slot 9"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4a3a3c78-afc3-4b50-abe1-21b0ba5be167"",
                    ""path"": ""<Keyboard>/0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Slot 10"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Gameplay_UI_PlayerInventory"",
            ""id"": ""0cbe198b-13c0-4b66-9f3c-8350f9af8578"",
            ""actions"": [
                {
                    ""name"": ""Toggle"",
                    ""type"": ""Button"",
                    ""id"": ""ef6701ea-a112-45bc-b450-0e43e73308f7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""7ee742be-a4c9-43af-ac99-2157b2a3c432"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fc173150-d0bf-405a-add3-49b969750567"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b8a96941-d11a-435a-a4b2-3b354f392480"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Dialogue"",
            ""id"": ""7a79e6c2-2dd7-4e8a-a02e-718d1bb22d76"",
            ""actions"": [
                {
                    ""name"": ""Continue"",
                    ""type"": ""Button"",
                    ""id"": ""252cfd22-2752-4f6e-a262-386d58467b2c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b5f0a5ff-b842-4ff3-a154-59eb7369c8c7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""947bd931-08e7-4fad-b825-438cd5c1f8c9"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay_Player
        m_Gameplay_Player = asset.FindActionMap("Gameplay_Player", throwIfNotFound: true);
        m_Gameplay_Player_Move = m_Gameplay_Player.FindAction("Move", throwIfNotFound: true);
        m_Gameplay_Player_Attack = m_Gameplay_Player.FindAction("Attack", throwIfNotFound: true);
        m_Gameplay_Player_Interact = m_Gameplay_Player.FindAction("Interact", throwIfNotFound: true);
        // Gameplay_UI_Hotbar
        m_Gameplay_UI_Hotbar = asset.FindActionMap("Gameplay_UI_Hotbar", throwIfNotFound: true);
        m_Gameplay_UI_Hotbar_ScrollSlots = m_Gameplay_UI_Hotbar.FindAction("Scroll Slots", throwIfNotFound: true);
        m_Gameplay_UI_Hotbar_SelectSlot1 = m_Gameplay_UI_Hotbar.FindAction("Select Slot 1", throwIfNotFound: true);
        m_Gameplay_UI_Hotbar_SelectSlot2 = m_Gameplay_UI_Hotbar.FindAction("Select Slot 2", throwIfNotFound: true);
        m_Gameplay_UI_Hotbar_SelectSlot3 = m_Gameplay_UI_Hotbar.FindAction("Select Slot 3", throwIfNotFound: true);
        m_Gameplay_UI_Hotbar_SelectSlot4 = m_Gameplay_UI_Hotbar.FindAction("Select Slot 4", throwIfNotFound: true);
        m_Gameplay_UI_Hotbar_SelectSlot5 = m_Gameplay_UI_Hotbar.FindAction("Select Slot 5", throwIfNotFound: true);
        m_Gameplay_UI_Hotbar_SelectSlot6 = m_Gameplay_UI_Hotbar.FindAction("Select Slot 6", throwIfNotFound: true);
        m_Gameplay_UI_Hotbar_SelectSlot7 = m_Gameplay_UI_Hotbar.FindAction("Select Slot 7", throwIfNotFound: true);
        m_Gameplay_UI_Hotbar_SelectSlot8 = m_Gameplay_UI_Hotbar.FindAction("Select Slot 8", throwIfNotFound: true);
        m_Gameplay_UI_Hotbar_SelectSlot9 = m_Gameplay_UI_Hotbar.FindAction("Select Slot 9", throwIfNotFound: true);
        m_Gameplay_UI_Hotbar_SelectSlot10 = m_Gameplay_UI_Hotbar.FindAction("Select Slot 10", throwIfNotFound: true);
        // Gameplay_UI_PlayerInventory
        m_Gameplay_UI_PlayerInventory = asset.FindActionMap("Gameplay_UI_PlayerInventory", throwIfNotFound: true);
        m_Gameplay_UI_PlayerInventory_Toggle = m_Gameplay_UI_PlayerInventory.FindAction("Toggle", throwIfNotFound: true);
        m_Gameplay_UI_PlayerInventory_Exit = m_Gameplay_UI_PlayerInventory.FindAction("Exit", throwIfNotFound: true);
        // Dialogue
        m_Dialogue = asset.FindActionMap("Dialogue", throwIfNotFound: true);
        m_Dialogue_Continue = m_Dialogue.FindAction("Continue", throwIfNotFound: true);
    }

    ~@Controls()
    {
        UnityEngine.Debug.Assert(!m_Gameplay_Player.enabled, "This will cause a leak and performance issues, Controls.Gameplay_Player.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Gameplay_UI_Hotbar.enabled, "This will cause a leak and performance issues, Controls.Gameplay_UI_Hotbar.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Gameplay_UI_PlayerInventory.enabled, "This will cause a leak and performance issues, Controls.Gameplay_UI_PlayerInventory.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Dialogue.enabled, "This will cause a leak and performance issues, Controls.Dialogue.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay_Player
    private readonly InputActionMap m_Gameplay_Player;
    private List<IGameplay_PlayerActions> m_Gameplay_PlayerActionsCallbackInterfaces = new List<IGameplay_PlayerActions>();
    private readonly InputAction m_Gameplay_Player_Move;
    private readonly InputAction m_Gameplay_Player_Attack;
    private readonly InputAction m_Gameplay_Player_Interact;
    public struct Gameplay_PlayerActions
    {
        private @Controls m_Wrapper;
        public Gameplay_PlayerActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Gameplay_Player_Move;
        public InputAction @Attack => m_Wrapper.m_Gameplay_Player_Attack;
        public InputAction @Interact => m_Wrapper.m_Gameplay_Player_Interact;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Gameplay_PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IGameplay_PlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_Gameplay_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Gameplay_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
        }

        private void UnregisterCallbacks(IGameplay_PlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
        }

        public void RemoveCallbacks(IGameplay_PlayerActions instance)
        {
            if (m_Wrapper.m_Gameplay_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplay_PlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_Gameplay_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Gameplay_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Gameplay_PlayerActions @Gameplay_Player => new Gameplay_PlayerActions(this);

    // Gameplay_UI_Hotbar
    private readonly InputActionMap m_Gameplay_UI_Hotbar;
    private List<IGameplay_UI_HotbarActions> m_Gameplay_UI_HotbarActionsCallbackInterfaces = new List<IGameplay_UI_HotbarActions>();
    private readonly InputAction m_Gameplay_UI_Hotbar_ScrollSlots;
    private readonly InputAction m_Gameplay_UI_Hotbar_SelectSlot1;
    private readonly InputAction m_Gameplay_UI_Hotbar_SelectSlot2;
    private readonly InputAction m_Gameplay_UI_Hotbar_SelectSlot3;
    private readonly InputAction m_Gameplay_UI_Hotbar_SelectSlot4;
    private readonly InputAction m_Gameplay_UI_Hotbar_SelectSlot5;
    private readonly InputAction m_Gameplay_UI_Hotbar_SelectSlot6;
    private readonly InputAction m_Gameplay_UI_Hotbar_SelectSlot7;
    private readonly InputAction m_Gameplay_UI_Hotbar_SelectSlot8;
    private readonly InputAction m_Gameplay_UI_Hotbar_SelectSlot9;
    private readonly InputAction m_Gameplay_UI_Hotbar_SelectSlot10;
    public struct Gameplay_UI_HotbarActions
    {
        private @Controls m_Wrapper;
        public Gameplay_UI_HotbarActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ScrollSlots => m_Wrapper.m_Gameplay_UI_Hotbar_ScrollSlots;
        public InputAction @SelectSlot1 => m_Wrapper.m_Gameplay_UI_Hotbar_SelectSlot1;
        public InputAction @SelectSlot2 => m_Wrapper.m_Gameplay_UI_Hotbar_SelectSlot2;
        public InputAction @SelectSlot3 => m_Wrapper.m_Gameplay_UI_Hotbar_SelectSlot3;
        public InputAction @SelectSlot4 => m_Wrapper.m_Gameplay_UI_Hotbar_SelectSlot4;
        public InputAction @SelectSlot5 => m_Wrapper.m_Gameplay_UI_Hotbar_SelectSlot5;
        public InputAction @SelectSlot6 => m_Wrapper.m_Gameplay_UI_Hotbar_SelectSlot6;
        public InputAction @SelectSlot7 => m_Wrapper.m_Gameplay_UI_Hotbar_SelectSlot7;
        public InputAction @SelectSlot8 => m_Wrapper.m_Gameplay_UI_Hotbar_SelectSlot8;
        public InputAction @SelectSlot9 => m_Wrapper.m_Gameplay_UI_Hotbar_SelectSlot9;
        public InputAction @SelectSlot10 => m_Wrapper.m_Gameplay_UI_Hotbar_SelectSlot10;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay_UI_Hotbar; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Gameplay_UI_HotbarActions set) { return set.Get(); }
        public void AddCallbacks(IGameplay_UI_HotbarActions instance)
        {
            if (instance == null || m_Wrapper.m_Gameplay_UI_HotbarActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Gameplay_UI_HotbarActionsCallbackInterfaces.Add(instance);
            @ScrollSlots.started += instance.OnScrollSlots;
            @ScrollSlots.performed += instance.OnScrollSlots;
            @ScrollSlots.canceled += instance.OnScrollSlots;
            @SelectSlot1.started += instance.OnSelectSlot1;
            @SelectSlot1.performed += instance.OnSelectSlot1;
            @SelectSlot1.canceled += instance.OnSelectSlot1;
            @SelectSlot2.started += instance.OnSelectSlot2;
            @SelectSlot2.performed += instance.OnSelectSlot2;
            @SelectSlot2.canceled += instance.OnSelectSlot2;
            @SelectSlot3.started += instance.OnSelectSlot3;
            @SelectSlot3.performed += instance.OnSelectSlot3;
            @SelectSlot3.canceled += instance.OnSelectSlot3;
            @SelectSlot4.started += instance.OnSelectSlot4;
            @SelectSlot4.performed += instance.OnSelectSlot4;
            @SelectSlot4.canceled += instance.OnSelectSlot4;
            @SelectSlot5.started += instance.OnSelectSlot5;
            @SelectSlot5.performed += instance.OnSelectSlot5;
            @SelectSlot5.canceled += instance.OnSelectSlot5;
            @SelectSlot6.started += instance.OnSelectSlot6;
            @SelectSlot6.performed += instance.OnSelectSlot6;
            @SelectSlot6.canceled += instance.OnSelectSlot6;
            @SelectSlot7.started += instance.OnSelectSlot7;
            @SelectSlot7.performed += instance.OnSelectSlot7;
            @SelectSlot7.canceled += instance.OnSelectSlot7;
            @SelectSlot8.started += instance.OnSelectSlot8;
            @SelectSlot8.performed += instance.OnSelectSlot8;
            @SelectSlot8.canceled += instance.OnSelectSlot8;
            @SelectSlot9.started += instance.OnSelectSlot9;
            @SelectSlot9.performed += instance.OnSelectSlot9;
            @SelectSlot9.canceled += instance.OnSelectSlot9;
            @SelectSlot10.started += instance.OnSelectSlot10;
            @SelectSlot10.performed += instance.OnSelectSlot10;
            @SelectSlot10.canceled += instance.OnSelectSlot10;
        }

        private void UnregisterCallbacks(IGameplay_UI_HotbarActions instance)
        {
            @ScrollSlots.started -= instance.OnScrollSlots;
            @ScrollSlots.performed -= instance.OnScrollSlots;
            @ScrollSlots.canceled -= instance.OnScrollSlots;
            @SelectSlot1.started -= instance.OnSelectSlot1;
            @SelectSlot1.performed -= instance.OnSelectSlot1;
            @SelectSlot1.canceled -= instance.OnSelectSlot1;
            @SelectSlot2.started -= instance.OnSelectSlot2;
            @SelectSlot2.performed -= instance.OnSelectSlot2;
            @SelectSlot2.canceled -= instance.OnSelectSlot2;
            @SelectSlot3.started -= instance.OnSelectSlot3;
            @SelectSlot3.performed -= instance.OnSelectSlot3;
            @SelectSlot3.canceled -= instance.OnSelectSlot3;
            @SelectSlot4.started -= instance.OnSelectSlot4;
            @SelectSlot4.performed -= instance.OnSelectSlot4;
            @SelectSlot4.canceled -= instance.OnSelectSlot4;
            @SelectSlot5.started -= instance.OnSelectSlot5;
            @SelectSlot5.performed -= instance.OnSelectSlot5;
            @SelectSlot5.canceled -= instance.OnSelectSlot5;
            @SelectSlot6.started -= instance.OnSelectSlot6;
            @SelectSlot6.performed -= instance.OnSelectSlot6;
            @SelectSlot6.canceled -= instance.OnSelectSlot6;
            @SelectSlot7.started -= instance.OnSelectSlot7;
            @SelectSlot7.performed -= instance.OnSelectSlot7;
            @SelectSlot7.canceled -= instance.OnSelectSlot7;
            @SelectSlot8.started -= instance.OnSelectSlot8;
            @SelectSlot8.performed -= instance.OnSelectSlot8;
            @SelectSlot8.canceled -= instance.OnSelectSlot8;
            @SelectSlot9.started -= instance.OnSelectSlot9;
            @SelectSlot9.performed -= instance.OnSelectSlot9;
            @SelectSlot9.canceled -= instance.OnSelectSlot9;
            @SelectSlot10.started -= instance.OnSelectSlot10;
            @SelectSlot10.performed -= instance.OnSelectSlot10;
            @SelectSlot10.canceled -= instance.OnSelectSlot10;
        }

        public void RemoveCallbacks(IGameplay_UI_HotbarActions instance)
        {
            if (m_Wrapper.m_Gameplay_UI_HotbarActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplay_UI_HotbarActions instance)
        {
            foreach (var item in m_Wrapper.m_Gameplay_UI_HotbarActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Gameplay_UI_HotbarActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Gameplay_UI_HotbarActions @Gameplay_UI_Hotbar => new Gameplay_UI_HotbarActions(this);

    // Gameplay_UI_PlayerInventory
    private readonly InputActionMap m_Gameplay_UI_PlayerInventory;
    private List<IGameplay_UI_PlayerInventoryActions> m_Gameplay_UI_PlayerInventoryActionsCallbackInterfaces = new List<IGameplay_UI_PlayerInventoryActions>();
    private readonly InputAction m_Gameplay_UI_PlayerInventory_Toggle;
    private readonly InputAction m_Gameplay_UI_PlayerInventory_Exit;
    public struct Gameplay_UI_PlayerInventoryActions
    {
        private @Controls m_Wrapper;
        public Gameplay_UI_PlayerInventoryActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Toggle => m_Wrapper.m_Gameplay_UI_PlayerInventory_Toggle;
        public InputAction @Exit => m_Wrapper.m_Gameplay_UI_PlayerInventory_Exit;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay_UI_PlayerInventory; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Gameplay_UI_PlayerInventoryActions set) { return set.Get(); }
        public void AddCallbacks(IGameplay_UI_PlayerInventoryActions instance)
        {
            if (instance == null || m_Wrapper.m_Gameplay_UI_PlayerInventoryActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Gameplay_UI_PlayerInventoryActionsCallbackInterfaces.Add(instance);
            @Toggle.started += instance.OnToggle;
            @Toggle.performed += instance.OnToggle;
            @Toggle.canceled += instance.OnToggle;
            @Exit.started += instance.OnExit;
            @Exit.performed += instance.OnExit;
            @Exit.canceled += instance.OnExit;
        }

        private void UnregisterCallbacks(IGameplay_UI_PlayerInventoryActions instance)
        {
            @Toggle.started -= instance.OnToggle;
            @Toggle.performed -= instance.OnToggle;
            @Toggle.canceled -= instance.OnToggle;
            @Exit.started -= instance.OnExit;
            @Exit.performed -= instance.OnExit;
            @Exit.canceled -= instance.OnExit;
        }

        public void RemoveCallbacks(IGameplay_UI_PlayerInventoryActions instance)
        {
            if (m_Wrapper.m_Gameplay_UI_PlayerInventoryActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplay_UI_PlayerInventoryActions instance)
        {
            foreach (var item in m_Wrapper.m_Gameplay_UI_PlayerInventoryActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Gameplay_UI_PlayerInventoryActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Gameplay_UI_PlayerInventoryActions @Gameplay_UI_PlayerInventory => new Gameplay_UI_PlayerInventoryActions(this);

    // Dialogue
    private readonly InputActionMap m_Dialogue;
    private List<IDialogueActions> m_DialogueActionsCallbackInterfaces = new List<IDialogueActions>();
    private readonly InputAction m_Dialogue_Continue;
    public struct DialogueActions
    {
        private @Controls m_Wrapper;
        public DialogueActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Continue => m_Wrapper.m_Dialogue_Continue;
        public InputActionMap Get() { return m_Wrapper.m_Dialogue; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DialogueActions set) { return set.Get(); }
        public void AddCallbacks(IDialogueActions instance)
        {
            if (instance == null || m_Wrapper.m_DialogueActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DialogueActionsCallbackInterfaces.Add(instance);
            @Continue.started += instance.OnContinue;
            @Continue.performed += instance.OnContinue;
            @Continue.canceled += instance.OnContinue;
        }

        private void UnregisterCallbacks(IDialogueActions instance)
        {
            @Continue.started -= instance.OnContinue;
            @Continue.performed -= instance.OnContinue;
            @Continue.canceled -= instance.OnContinue;
        }

        public void RemoveCallbacks(IDialogueActions instance)
        {
            if (m_Wrapper.m_DialogueActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDialogueActions instance)
        {
            foreach (var item in m_Wrapper.m_DialogueActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DialogueActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DialogueActions @Dialogue => new DialogueActions(this);
    public interface IGameplay_PlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
    public interface IGameplay_UI_HotbarActions
    {
        void OnScrollSlots(InputAction.CallbackContext context);
        void OnSelectSlot1(InputAction.CallbackContext context);
        void OnSelectSlot2(InputAction.CallbackContext context);
        void OnSelectSlot3(InputAction.CallbackContext context);
        void OnSelectSlot4(InputAction.CallbackContext context);
        void OnSelectSlot5(InputAction.CallbackContext context);
        void OnSelectSlot6(InputAction.CallbackContext context);
        void OnSelectSlot7(InputAction.CallbackContext context);
        void OnSelectSlot8(InputAction.CallbackContext context);
        void OnSelectSlot9(InputAction.CallbackContext context);
        void OnSelectSlot10(InputAction.CallbackContext context);
    }
    public interface IGameplay_UI_PlayerInventoryActions
    {
        void OnToggle(InputAction.CallbackContext context);
        void OnExit(InputAction.CallbackContext context);
    }
    public interface IDialogueActions
    {
        void OnContinue(InputAction.CallbackContext context);
    }
}
