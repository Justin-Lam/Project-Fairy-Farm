//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/9_Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""7ff99b73-fde6-421f-bfb3-96f9ce780fb5"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""ecf32bd7-fdf5-4e23-abf7-41e1805ef294"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Use Item"",
                    ""type"": ""Button"",
                    ""id"": ""e324ef34-c561-43bd-923c-5bbc52c4aa93"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""959cffe8-def3-4516-b5bc-8a7fd47215a0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scroll Hotbar"",
                    ""type"": ""Value"",
                    ""id"": ""36c02161-e767-4f50-bbc6-7a982e7e9f12"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": ""Clamp(min=-1,max=1)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Select Hotbar Slot 1"",
                    ""type"": ""Button"",
                    ""id"": ""67dc13b5-9bf2-4928-9bf0-db44754cbfe7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Hotbar Slot 2"",
                    ""type"": ""Button"",
                    ""id"": ""8a56e184-d090-4596-8db9-262257ca6a2d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Hotbar Slot 3"",
                    ""type"": ""Button"",
                    ""id"": ""eafff1a6-89bd-4a78-849b-4bc7d360d892"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Hotbar Slot 4"",
                    ""type"": ""Button"",
                    ""id"": ""6846d9a9-a5f1-4a0f-8960-da7585fc7c8f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Hotbar Slot 5"",
                    ""type"": ""Button"",
                    ""id"": ""3739cfb6-a55b-4b02-ba11-66bac2203aa9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Hotbar Slot 6"",
                    ""type"": ""Button"",
                    ""id"": ""de7edfb5-81bb-4c9b-82af-e5ee2a650e5c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Hotbar Slot 7"",
                    ""type"": ""Button"",
                    ""id"": ""4db4e449-2c91-4ed8-8d75-6d10fc6bef09"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Hotbar Slot 8"",
                    ""type"": ""Button"",
                    ""id"": ""60c0e674-ed51-4def-b75c-3aa08261e162"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Hotbar Slot 9"",
                    ""type"": ""Button"",
                    ""id"": ""7d4879e1-ccb9-469e-990e-039568f346f4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Hotbar Slot 10"",
                    ""type"": ""Button"",
                    ""id"": ""430d9636-437f-4366-984d-b5e0917997bb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""a01da8a8-f8f4-4a7d-853b-bbe9c359bc09"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ff898898-c253-46c1-a5af-d9e843a0ce7e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4bbadc12-545b-4d78-94e2-bcc77be3f9d2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b6ded12f-7dbe-4776-b7bb-eaeb8567ddeb"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""89c037f5-d151-42ba-95d3-b40b0f2446c0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1ef720f1-7c3d-4981-a3a1-240ac261d6f9"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Hotbar Slot 3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""990dc577-5e8b-484a-bdf9-719308c58df6"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Hotbar Slot 4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""932c7718-a9d4-44a2-8e04-b2b22e79db65"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Hotbar Slot 5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""de58aa3b-151f-49d5-b71e-ae789561e66b"",
                    ""path"": ""<Keyboard>/6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Hotbar Slot 6"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""035c53fd-ce61-4597-90eb-b78844c74f42"",
                    ""path"": ""<Keyboard>/7"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Hotbar Slot 7"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""16e05936-b667-4156-8097-d6a7582a4c80"",
                    ""path"": ""<Keyboard>/8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Hotbar Slot 8"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e28670ad-a806-49de-bd9d-d9f6a435bc60"",
                    ""path"": ""<Keyboard>/9"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Hotbar Slot 9"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2dc84dab-82f2-4789-8584-bcb01a3d6ed2"",
                    ""path"": ""<Keyboard>/0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Hotbar Slot 10"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b0e2c1bd-a1e0-4888-bd6f-298b1bb2c12c"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Hotbar Slot 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""035eff77-66c5-4fbe-a2fa-b3da47b816bf"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Hotbar Slot 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea6e4827-381a-4c1f-907d-98b72c621f78"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""1758ae8c-352f-4de0-a6ad-73a9ae1a942b"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll Hotbar"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""d68aee70-e871-4f14-ac88-d5c8fa2fca63"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll Hotbar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""f730219d-d391-47ff-a644-fc2eb650d4a3"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll Hotbar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a5d6347b-57b2-4d32-943b-44034ba75b3d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Use Item"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player Inventory"",
            ""id"": ""c23e0c0d-2217-465a-8631-b336e40c2234"",
            ""actions"": [
                {
                    ""name"": ""Toggle"",
                    ""type"": ""Button"",
                    ""id"": ""dfacfc54-a3c7-49d9-8692-8cd236f75ca9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""6b85d3c1-27b6-4d2a-8ee4-d27d3b165dfe"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bd27b280-3daf-4917-a58f-1207f4b9328c"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2bcc18e1-536c-4f5d-854d-396aaee6c4ce"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Dialogue"",
            ""id"": ""7a79e6c2-2dd7-4e8a-a02e-718d1bb22d76"",
            ""actions"": [
                {
                    ""name"": ""Continue"",
                    ""type"": ""Button"",
                    ""id"": ""252cfd22-2752-4f6e-a262-386d58467b2c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b5f0a5ff-b842-4ff3-a154-59eb7369c8c7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""947bd931-08e7-4fad-b825-438cd5c1f8c9"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_UseItem = m_Player.FindAction("Use Item", throwIfNotFound: true);
        m_Player_Interact = m_Player.FindAction("Interact", throwIfNotFound: true);
        m_Player_ScrollHotbar = m_Player.FindAction("Scroll Hotbar", throwIfNotFound: true);
        m_Player_SelectHotbarSlot1 = m_Player.FindAction("Select Hotbar Slot 1", throwIfNotFound: true);
        m_Player_SelectHotbarSlot2 = m_Player.FindAction("Select Hotbar Slot 2", throwIfNotFound: true);
        m_Player_SelectHotbarSlot3 = m_Player.FindAction("Select Hotbar Slot 3", throwIfNotFound: true);
        m_Player_SelectHotbarSlot4 = m_Player.FindAction("Select Hotbar Slot 4", throwIfNotFound: true);
        m_Player_SelectHotbarSlot5 = m_Player.FindAction("Select Hotbar Slot 5", throwIfNotFound: true);
        m_Player_SelectHotbarSlot6 = m_Player.FindAction("Select Hotbar Slot 6", throwIfNotFound: true);
        m_Player_SelectHotbarSlot7 = m_Player.FindAction("Select Hotbar Slot 7", throwIfNotFound: true);
        m_Player_SelectHotbarSlot8 = m_Player.FindAction("Select Hotbar Slot 8", throwIfNotFound: true);
        m_Player_SelectHotbarSlot9 = m_Player.FindAction("Select Hotbar Slot 9", throwIfNotFound: true);
        m_Player_SelectHotbarSlot10 = m_Player.FindAction("Select Hotbar Slot 10", throwIfNotFound: true);
        // Player Inventory
        m_PlayerInventory = asset.FindActionMap("Player Inventory", throwIfNotFound: true);
        m_PlayerInventory_Toggle = m_PlayerInventory.FindAction("Toggle", throwIfNotFound: true);
        m_PlayerInventory_Exit = m_PlayerInventory.FindAction("Exit", throwIfNotFound: true);
        // Dialogue
        m_Dialogue = asset.FindActionMap("Dialogue", throwIfNotFound: true);
        m_Dialogue_Continue = m_Dialogue.FindAction("Continue", throwIfNotFound: true);
    }

    ~@Controls()
    {
        UnityEngine.Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, Controls.Player.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_PlayerInventory.enabled, "This will cause a leak and performance issues, Controls.PlayerInventory.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Dialogue.enabled, "This will cause a leak and performance issues, Controls.Dialogue.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_UseItem;
    private readonly InputAction m_Player_Interact;
    private readonly InputAction m_Player_ScrollHotbar;
    private readonly InputAction m_Player_SelectHotbarSlot1;
    private readonly InputAction m_Player_SelectHotbarSlot2;
    private readonly InputAction m_Player_SelectHotbarSlot3;
    private readonly InputAction m_Player_SelectHotbarSlot4;
    private readonly InputAction m_Player_SelectHotbarSlot5;
    private readonly InputAction m_Player_SelectHotbarSlot6;
    private readonly InputAction m_Player_SelectHotbarSlot7;
    private readonly InputAction m_Player_SelectHotbarSlot8;
    private readonly InputAction m_Player_SelectHotbarSlot9;
    private readonly InputAction m_Player_SelectHotbarSlot10;
    public struct PlayerActions
    {
        private @Controls m_Wrapper;
        public PlayerActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @UseItem => m_Wrapper.m_Player_UseItem;
        public InputAction @Interact => m_Wrapper.m_Player_Interact;
        public InputAction @ScrollHotbar => m_Wrapper.m_Player_ScrollHotbar;
        public InputAction @SelectHotbarSlot1 => m_Wrapper.m_Player_SelectHotbarSlot1;
        public InputAction @SelectHotbarSlot2 => m_Wrapper.m_Player_SelectHotbarSlot2;
        public InputAction @SelectHotbarSlot3 => m_Wrapper.m_Player_SelectHotbarSlot3;
        public InputAction @SelectHotbarSlot4 => m_Wrapper.m_Player_SelectHotbarSlot4;
        public InputAction @SelectHotbarSlot5 => m_Wrapper.m_Player_SelectHotbarSlot5;
        public InputAction @SelectHotbarSlot6 => m_Wrapper.m_Player_SelectHotbarSlot6;
        public InputAction @SelectHotbarSlot7 => m_Wrapper.m_Player_SelectHotbarSlot7;
        public InputAction @SelectHotbarSlot8 => m_Wrapper.m_Player_SelectHotbarSlot8;
        public InputAction @SelectHotbarSlot9 => m_Wrapper.m_Player_SelectHotbarSlot9;
        public InputAction @SelectHotbarSlot10 => m_Wrapper.m_Player_SelectHotbarSlot10;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @UseItem.started += instance.OnUseItem;
            @UseItem.performed += instance.OnUseItem;
            @UseItem.canceled += instance.OnUseItem;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @ScrollHotbar.started += instance.OnScrollHotbar;
            @ScrollHotbar.performed += instance.OnScrollHotbar;
            @ScrollHotbar.canceled += instance.OnScrollHotbar;
            @SelectHotbarSlot1.started += instance.OnSelectHotbarSlot1;
            @SelectHotbarSlot1.performed += instance.OnSelectHotbarSlot1;
            @SelectHotbarSlot1.canceled += instance.OnSelectHotbarSlot1;
            @SelectHotbarSlot2.started += instance.OnSelectHotbarSlot2;
            @SelectHotbarSlot2.performed += instance.OnSelectHotbarSlot2;
            @SelectHotbarSlot2.canceled += instance.OnSelectHotbarSlot2;
            @SelectHotbarSlot3.started += instance.OnSelectHotbarSlot3;
            @SelectHotbarSlot3.performed += instance.OnSelectHotbarSlot3;
            @SelectHotbarSlot3.canceled += instance.OnSelectHotbarSlot3;
            @SelectHotbarSlot4.started += instance.OnSelectHotbarSlot4;
            @SelectHotbarSlot4.performed += instance.OnSelectHotbarSlot4;
            @SelectHotbarSlot4.canceled += instance.OnSelectHotbarSlot4;
            @SelectHotbarSlot5.started += instance.OnSelectHotbarSlot5;
            @SelectHotbarSlot5.performed += instance.OnSelectHotbarSlot5;
            @SelectHotbarSlot5.canceled += instance.OnSelectHotbarSlot5;
            @SelectHotbarSlot6.started += instance.OnSelectHotbarSlot6;
            @SelectHotbarSlot6.performed += instance.OnSelectHotbarSlot6;
            @SelectHotbarSlot6.canceled += instance.OnSelectHotbarSlot6;
            @SelectHotbarSlot7.started += instance.OnSelectHotbarSlot7;
            @SelectHotbarSlot7.performed += instance.OnSelectHotbarSlot7;
            @SelectHotbarSlot7.canceled += instance.OnSelectHotbarSlot7;
            @SelectHotbarSlot8.started += instance.OnSelectHotbarSlot8;
            @SelectHotbarSlot8.performed += instance.OnSelectHotbarSlot8;
            @SelectHotbarSlot8.canceled += instance.OnSelectHotbarSlot8;
            @SelectHotbarSlot9.started += instance.OnSelectHotbarSlot9;
            @SelectHotbarSlot9.performed += instance.OnSelectHotbarSlot9;
            @SelectHotbarSlot9.canceled += instance.OnSelectHotbarSlot9;
            @SelectHotbarSlot10.started += instance.OnSelectHotbarSlot10;
            @SelectHotbarSlot10.performed += instance.OnSelectHotbarSlot10;
            @SelectHotbarSlot10.canceled += instance.OnSelectHotbarSlot10;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @UseItem.started -= instance.OnUseItem;
            @UseItem.performed -= instance.OnUseItem;
            @UseItem.canceled -= instance.OnUseItem;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @ScrollHotbar.started -= instance.OnScrollHotbar;
            @ScrollHotbar.performed -= instance.OnScrollHotbar;
            @ScrollHotbar.canceled -= instance.OnScrollHotbar;
            @SelectHotbarSlot1.started -= instance.OnSelectHotbarSlot1;
            @SelectHotbarSlot1.performed -= instance.OnSelectHotbarSlot1;
            @SelectHotbarSlot1.canceled -= instance.OnSelectHotbarSlot1;
            @SelectHotbarSlot2.started -= instance.OnSelectHotbarSlot2;
            @SelectHotbarSlot2.performed -= instance.OnSelectHotbarSlot2;
            @SelectHotbarSlot2.canceled -= instance.OnSelectHotbarSlot2;
            @SelectHotbarSlot3.started -= instance.OnSelectHotbarSlot3;
            @SelectHotbarSlot3.performed -= instance.OnSelectHotbarSlot3;
            @SelectHotbarSlot3.canceled -= instance.OnSelectHotbarSlot3;
            @SelectHotbarSlot4.started -= instance.OnSelectHotbarSlot4;
            @SelectHotbarSlot4.performed -= instance.OnSelectHotbarSlot4;
            @SelectHotbarSlot4.canceled -= instance.OnSelectHotbarSlot4;
            @SelectHotbarSlot5.started -= instance.OnSelectHotbarSlot5;
            @SelectHotbarSlot5.performed -= instance.OnSelectHotbarSlot5;
            @SelectHotbarSlot5.canceled -= instance.OnSelectHotbarSlot5;
            @SelectHotbarSlot6.started -= instance.OnSelectHotbarSlot6;
            @SelectHotbarSlot6.performed -= instance.OnSelectHotbarSlot6;
            @SelectHotbarSlot6.canceled -= instance.OnSelectHotbarSlot6;
            @SelectHotbarSlot7.started -= instance.OnSelectHotbarSlot7;
            @SelectHotbarSlot7.performed -= instance.OnSelectHotbarSlot7;
            @SelectHotbarSlot7.canceled -= instance.OnSelectHotbarSlot7;
            @SelectHotbarSlot8.started -= instance.OnSelectHotbarSlot8;
            @SelectHotbarSlot8.performed -= instance.OnSelectHotbarSlot8;
            @SelectHotbarSlot8.canceled -= instance.OnSelectHotbarSlot8;
            @SelectHotbarSlot9.started -= instance.OnSelectHotbarSlot9;
            @SelectHotbarSlot9.performed -= instance.OnSelectHotbarSlot9;
            @SelectHotbarSlot9.canceled -= instance.OnSelectHotbarSlot9;
            @SelectHotbarSlot10.started -= instance.OnSelectHotbarSlot10;
            @SelectHotbarSlot10.performed -= instance.OnSelectHotbarSlot10;
            @SelectHotbarSlot10.canceled -= instance.OnSelectHotbarSlot10;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Player Inventory
    private readonly InputActionMap m_PlayerInventory;
    private List<IPlayerInventoryActions> m_PlayerInventoryActionsCallbackInterfaces = new List<IPlayerInventoryActions>();
    private readonly InputAction m_PlayerInventory_Toggle;
    private readonly InputAction m_PlayerInventory_Exit;
    public struct PlayerInventoryActions
    {
        private @Controls m_Wrapper;
        public PlayerInventoryActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Toggle => m_Wrapper.m_PlayerInventory_Toggle;
        public InputAction @Exit => m_Wrapper.m_PlayerInventory_Exit;
        public InputActionMap Get() { return m_Wrapper.m_PlayerInventory; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerInventoryActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerInventoryActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerInventoryActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerInventoryActionsCallbackInterfaces.Add(instance);
            @Toggle.started += instance.OnToggle;
            @Toggle.performed += instance.OnToggle;
            @Toggle.canceled += instance.OnToggle;
            @Exit.started += instance.OnExit;
            @Exit.performed += instance.OnExit;
            @Exit.canceled += instance.OnExit;
        }

        private void UnregisterCallbacks(IPlayerInventoryActions instance)
        {
            @Toggle.started -= instance.OnToggle;
            @Toggle.performed -= instance.OnToggle;
            @Toggle.canceled -= instance.OnToggle;
            @Exit.started -= instance.OnExit;
            @Exit.performed -= instance.OnExit;
            @Exit.canceled -= instance.OnExit;
        }

        public void RemoveCallbacks(IPlayerInventoryActions instance)
        {
            if (m_Wrapper.m_PlayerInventoryActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerInventoryActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerInventoryActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerInventoryActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerInventoryActions @PlayerInventory => new PlayerInventoryActions(this);

    // Dialogue
    private readonly InputActionMap m_Dialogue;
    private List<IDialogueActions> m_DialogueActionsCallbackInterfaces = new List<IDialogueActions>();
    private readonly InputAction m_Dialogue_Continue;
    public struct DialogueActions
    {
        private @Controls m_Wrapper;
        public DialogueActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Continue => m_Wrapper.m_Dialogue_Continue;
        public InputActionMap Get() { return m_Wrapper.m_Dialogue; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DialogueActions set) { return set.Get(); }
        public void AddCallbacks(IDialogueActions instance)
        {
            if (instance == null || m_Wrapper.m_DialogueActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DialogueActionsCallbackInterfaces.Add(instance);
            @Continue.started += instance.OnContinue;
            @Continue.performed += instance.OnContinue;
            @Continue.canceled += instance.OnContinue;
        }

        private void UnregisterCallbacks(IDialogueActions instance)
        {
            @Continue.started -= instance.OnContinue;
            @Continue.performed -= instance.OnContinue;
            @Continue.canceled -= instance.OnContinue;
        }

        public void RemoveCallbacks(IDialogueActions instance)
        {
            if (m_Wrapper.m_DialogueActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDialogueActions instance)
        {
            foreach (var item in m_Wrapper.m_DialogueActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DialogueActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DialogueActions @Dialogue => new DialogueActions(this);
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnUseItem(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnScrollHotbar(InputAction.CallbackContext context);
        void OnSelectHotbarSlot1(InputAction.CallbackContext context);
        void OnSelectHotbarSlot2(InputAction.CallbackContext context);
        void OnSelectHotbarSlot3(InputAction.CallbackContext context);
        void OnSelectHotbarSlot4(InputAction.CallbackContext context);
        void OnSelectHotbarSlot5(InputAction.CallbackContext context);
        void OnSelectHotbarSlot6(InputAction.CallbackContext context);
        void OnSelectHotbarSlot7(InputAction.CallbackContext context);
        void OnSelectHotbarSlot8(InputAction.CallbackContext context);
        void OnSelectHotbarSlot9(InputAction.CallbackContext context);
        void OnSelectHotbarSlot10(InputAction.CallbackContext context);
    }
    public interface IPlayerInventoryActions
    {
        void OnToggle(InputAction.CallbackContext context);
        void OnExit(InputAction.CallbackContext context);
    }
    public interface IDialogueActions
    {
        void OnContinue(InputAction.CallbackContext context);
    }
}
