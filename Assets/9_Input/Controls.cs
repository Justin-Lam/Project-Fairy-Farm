//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/9_Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""7ff99b73-fde6-421f-bfb3-96f9ce780fb5"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""ecf32bd7-fdf5-4e23-abf7-41e1805ef294"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""e324ef34-c561-43bd-923c-5bbc52c4aa93"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""959cffe8-def3-4516-b5bc-8a7fd47215a0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""a01da8a8-f8f4-4a7d-853b-bbe9c359bc09"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ff898898-c253-46c1-a5af-d9e843a0ce7e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4bbadc12-545b-4d78-94e2-bcc77be3f9d2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b6ded12f-7dbe-4776-b7bb-eaeb8567ddeb"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""89c037f5-d151-42ba-95d3-b40b0f2446c0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ea6e4827-381a-4c1f-907d-98b72c621f78"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a5d6347b-57b2-4d32-943b-44034ba75b3d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Gameplay_UI"",
            ""id"": ""0cbe198b-13c0-4b66-9f3c-8350f9af8578"",
            ""actions"": [
                {
                    ""name"": ""Scroll Slots"",
                    ""type"": ""Value"",
                    ""id"": ""0885aa94-845f-4248-880a-cb5b2f05d1fc"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": ""Clamp(min=-1,max=1)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Select Slot 1"",
                    ""type"": ""Button"",
                    ""id"": ""03d4be8e-0444-489c-a99a-a302126aebcc"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Slot 2"",
                    ""type"": ""Button"",
                    ""id"": ""8650b92e-5966-40e9-b410-25ea0468d548"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Slot 3"",
                    ""type"": ""Button"",
                    ""id"": ""f9dd3a70-c32d-4c27-80a6-0efa6d89ceba"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Slot 4"",
                    ""type"": ""Button"",
                    ""id"": ""f43e9416-af30-4734-9b4c-efa192568ee4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Slot 5"",
                    ""type"": ""Button"",
                    ""id"": ""c74490b8-25ed-4922-b837-b8363a6027ff"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Slot 6"",
                    ""type"": ""Button"",
                    ""id"": ""5dfcd1a7-9bed-4a8e-8503-74043f54e40a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Slot 7"",
                    ""type"": ""Button"",
                    ""id"": ""26b55bff-6bde-45f9-bcb4-87c003adf89e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Slot 8"",
                    ""type"": ""Button"",
                    ""id"": ""dd174508-e782-4ff8-97be-3ff2255503fa"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Slot 9"",
                    ""type"": ""Button"",
                    ""id"": ""c15caef1-3046-44a9-b728-ad203eb6eb9b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Slot 10"",
                    ""type"": ""Button"",
                    ""id"": ""ce868a31-d938-487d-9cff-742a4a571936"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Toggle Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""ef6701ea-a112-45bc-b450-0e43e73308f7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""7ee742be-a4c9-43af-ac99-2157b2a3c432"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""c6d2ea09-d63a-4c42-8c32-90b1c4f41f85"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""cfeac459-a402-44fc-9399-4f82652fd192"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll Slots"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""10c3c8bf-0efe-4b3e-8dfb-7e63d287078b"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll Slots"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""990bf2cd-4ffc-4563-a2c0-2aac67af4ad3"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll Slots"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""03a9acfa-888b-4231-a72f-de9ea7c455dd"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Slot 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d8c1db5e-ffaa-41e2-92d3-a1b692cca112"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Slot 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0e9ea2de-7437-4196-ae97-444af756b1bb"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Slot 3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""073e4a0c-5079-4661-ab0a-53f3124aa7c9"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Slot 4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b6f59b2-4d69-49d5-8670-550f2fa34500"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Slot 5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""003aa60d-7570-4ff0-afbf-e086af8f4366"",
                    ""path"": ""<Keyboard>/6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Slot 6"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2f40361b-aad5-4961-9a86-80064e358577"",
                    ""path"": ""<Keyboard>/7"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Slot 7"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d0de17d-18f8-443e-a6bb-fcb7367cc938"",
                    ""path"": ""<Keyboard>/8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Slot 8"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b4df343d-22c2-4b6f-ae0f-8883d654d0cd"",
                    ""path"": ""<Keyboard>/9"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Slot 9"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c1b32435-1c6c-4045-b0fb-2c20cd83c9ea"",
                    ""path"": ""<Keyboard>/0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Slot 10"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fc173150-d0bf-405a-add3-49b969750567"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toggle Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b8a96941-d11a-435a-a4b2-3b354f392480"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b30b9285-0f4b-40e2-ade9-1bab48d0a451"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Dialogue"",
            ""id"": ""7a79e6c2-2dd7-4e8a-a02e-718d1bb22d76"",
            ""actions"": [
                {
                    ""name"": ""Continue"",
                    ""type"": ""Button"",
                    ""id"": ""252cfd22-2752-4f6e-a262-386d58467b2c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b5f0a5ff-b842-4ff3-a154-59eb7369c8c7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""947bd931-08e7-4fad-b825-438cd5c1f8c9"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_Move = m_Gameplay.FindAction("Move", throwIfNotFound: true);
        m_Gameplay_Attack = m_Gameplay.FindAction("Attack", throwIfNotFound: true);
        m_Gameplay_Interact = m_Gameplay.FindAction("Interact", throwIfNotFound: true);
        // Gameplay_UI
        m_Gameplay_UI = asset.FindActionMap("Gameplay_UI", throwIfNotFound: true);
        m_Gameplay_UI_ScrollSlots = m_Gameplay_UI.FindAction("Scroll Slots", throwIfNotFound: true);
        m_Gameplay_UI_SelectSlot1 = m_Gameplay_UI.FindAction("Select Slot 1", throwIfNotFound: true);
        m_Gameplay_UI_SelectSlot2 = m_Gameplay_UI.FindAction("Select Slot 2", throwIfNotFound: true);
        m_Gameplay_UI_SelectSlot3 = m_Gameplay_UI.FindAction("Select Slot 3", throwIfNotFound: true);
        m_Gameplay_UI_SelectSlot4 = m_Gameplay_UI.FindAction("Select Slot 4", throwIfNotFound: true);
        m_Gameplay_UI_SelectSlot5 = m_Gameplay_UI.FindAction("Select Slot 5", throwIfNotFound: true);
        m_Gameplay_UI_SelectSlot6 = m_Gameplay_UI.FindAction("Select Slot 6", throwIfNotFound: true);
        m_Gameplay_UI_SelectSlot7 = m_Gameplay_UI.FindAction("Select Slot 7", throwIfNotFound: true);
        m_Gameplay_UI_SelectSlot8 = m_Gameplay_UI.FindAction("Select Slot 8", throwIfNotFound: true);
        m_Gameplay_UI_SelectSlot9 = m_Gameplay_UI.FindAction("Select Slot 9", throwIfNotFound: true);
        m_Gameplay_UI_SelectSlot10 = m_Gameplay_UI.FindAction("Select Slot 10", throwIfNotFound: true);
        m_Gameplay_UI_ToggleInventory = m_Gameplay_UI.FindAction("Toggle Inventory", throwIfNotFound: true);
        m_Gameplay_UI_Exit = m_Gameplay_UI.FindAction("Exit", throwIfNotFound: true);
        m_Gameplay_UI_Pause = m_Gameplay_UI.FindAction("Pause", throwIfNotFound: true);
        // Dialogue
        m_Dialogue = asset.FindActionMap("Dialogue", throwIfNotFound: true);
        m_Dialogue_Continue = m_Dialogue.FindAction("Continue", throwIfNotFound: true);
    }

    ~@Controls()
    {
        UnityEngine.Debug.Assert(!m_Gameplay.enabled, "This will cause a leak and performance issues, Controls.Gameplay.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Gameplay_UI.enabled, "This will cause a leak and performance issues, Controls.Gameplay_UI.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Dialogue.enabled, "This will cause a leak and performance issues, Controls.Dialogue.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_Move;
    private readonly InputAction m_Gameplay_Attack;
    private readonly InputAction m_Gameplay_Interact;
    public struct GameplayActions
    {
        private @Controls m_Wrapper;
        public GameplayActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Gameplay_Move;
        public InputAction @Attack => m_Wrapper.m_Gameplay_Attack;
        public InputAction @Interact => m_Wrapper.m_Gameplay_Interact;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);

    // Gameplay_UI
    private readonly InputActionMap m_Gameplay_UI;
    private List<IGameplay_UIActions> m_Gameplay_UIActionsCallbackInterfaces = new List<IGameplay_UIActions>();
    private readonly InputAction m_Gameplay_UI_ScrollSlots;
    private readonly InputAction m_Gameplay_UI_SelectSlot1;
    private readonly InputAction m_Gameplay_UI_SelectSlot2;
    private readonly InputAction m_Gameplay_UI_SelectSlot3;
    private readonly InputAction m_Gameplay_UI_SelectSlot4;
    private readonly InputAction m_Gameplay_UI_SelectSlot5;
    private readonly InputAction m_Gameplay_UI_SelectSlot6;
    private readonly InputAction m_Gameplay_UI_SelectSlot7;
    private readonly InputAction m_Gameplay_UI_SelectSlot8;
    private readonly InputAction m_Gameplay_UI_SelectSlot9;
    private readonly InputAction m_Gameplay_UI_SelectSlot10;
    private readonly InputAction m_Gameplay_UI_ToggleInventory;
    private readonly InputAction m_Gameplay_UI_Exit;
    private readonly InputAction m_Gameplay_UI_Pause;
    public struct Gameplay_UIActions
    {
        private @Controls m_Wrapper;
        public Gameplay_UIActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ScrollSlots => m_Wrapper.m_Gameplay_UI_ScrollSlots;
        public InputAction @SelectSlot1 => m_Wrapper.m_Gameplay_UI_SelectSlot1;
        public InputAction @SelectSlot2 => m_Wrapper.m_Gameplay_UI_SelectSlot2;
        public InputAction @SelectSlot3 => m_Wrapper.m_Gameplay_UI_SelectSlot3;
        public InputAction @SelectSlot4 => m_Wrapper.m_Gameplay_UI_SelectSlot4;
        public InputAction @SelectSlot5 => m_Wrapper.m_Gameplay_UI_SelectSlot5;
        public InputAction @SelectSlot6 => m_Wrapper.m_Gameplay_UI_SelectSlot6;
        public InputAction @SelectSlot7 => m_Wrapper.m_Gameplay_UI_SelectSlot7;
        public InputAction @SelectSlot8 => m_Wrapper.m_Gameplay_UI_SelectSlot8;
        public InputAction @SelectSlot9 => m_Wrapper.m_Gameplay_UI_SelectSlot9;
        public InputAction @SelectSlot10 => m_Wrapper.m_Gameplay_UI_SelectSlot10;
        public InputAction @ToggleInventory => m_Wrapper.m_Gameplay_UI_ToggleInventory;
        public InputAction @Exit => m_Wrapper.m_Gameplay_UI_Exit;
        public InputAction @Pause => m_Wrapper.m_Gameplay_UI_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Gameplay_UIActions set) { return set.Get(); }
        public void AddCallbacks(IGameplay_UIActions instance)
        {
            if (instance == null || m_Wrapper.m_Gameplay_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Gameplay_UIActionsCallbackInterfaces.Add(instance);
            @ScrollSlots.started += instance.OnScrollSlots;
            @ScrollSlots.performed += instance.OnScrollSlots;
            @ScrollSlots.canceled += instance.OnScrollSlots;
            @SelectSlot1.started += instance.OnSelectSlot1;
            @SelectSlot1.performed += instance.OnSelectSlot1;
            @SelectSlot1.canceled += instance.OnSelectSlot1;
            @SelectSlot2.started += instance.OnSelectSlot2;
            @SelectSlot2.performed += instance.OnSelectSlot2;
            @SelectSlot2.canceled += instance.OnSelectSlot2;
            @SelectSlot3.started += instance.OnSelectSlot3;
            @SelectSlot3.performed += instance.OnSelectSlot3;
            @SelectSlot3.canceled += instance.OnSelectSlot3;
            @SelectSlot4.started += instance.OnSelectSlot4;
            @SelectSlot4.performed += instance.OnSelectSlot4;
            @SelectSlot4.canceled += instance.OnSelectSlot4;
            @SelectSlot5.started += instance.OnSelectSlot5;
            @SelectSlot5.performed += instance.OnSelectSlot5;
            @SelectSlot5.canceled += instance.OnSelectSlot5;
            @SelectSlot6.started += instance.OnSelectSlot6;
            @SelectSlot6.performed += instance.OnSelectSlot6;
            @SelectSlot6.canceled += instance.OnSelectSlot6;
            @SelectSlot7.started += instance.OnSelectSlot7;
            @SelectSlot7.performed += instance.OnSelectSlot7;
            @SelectSlot7.canceled += instance.OnSelectSlot7;
            @SelectSlot8.started += instance.OnSelectSlot8;
            @SelectSlot8.performed += instance.OnSelectSlot8;
            @SelectSlot8.canceled += instance.OnSelectSlot8;
            @SelectSlot9.started += instance.OnSelectSlot9;
            @SelectSlot9.performed += instance.OnSelectSlot9;
            @SelectSlot9.canceled += instance.OnSelectSlot9;
            @SelectSlot10.started += instance.OnSelectSlot10;
            @SelectSlot10.performed += instance.OnSelectSlot10;
            @SelectSlot10.canceled += instance.OnSelectSlot10;
            @ToggleInventory.started += instance.OnToggleInventory;
            @ToggleInventory.performed += instance.OnToggleInventory;
            @ToggleInventory.canceled += instance.OnToggleInventory;
            @Exit.started += instance.OnExit;
            @Exit.performed += instance.OnExit;
            @Exit.canceled += instance.OnExit;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IGameplay_UIActions instance)
        {
            @ScrollSlots.started -= instance.OnScrollSlots;
            @ScrollSlots.performed -= instance.OnScrollSlots;
            @ScrollSlots.canceled -= instance.OnScrollSlots;
            @SelectSlot1.started -= instance.OnSelectSlot1;
            @SelectSlot1.performed -= instance.OnSelectSlot1;
            @SelectSlot1.canceled -= instance.OnSelectSlot1;
            @SelectSlot2.started -= instance.OnSelectSlot2;
            @SelectSlot2.performed -= instance.OnSelectSlot2;
            @SelectSlot2.canceled -= instance.OnSelectSlot2;
            @SelectSlot3.started -= instance.OnSelectSlot3;
            @SelectSlot3.performed -= instance.OnSelectSlot3;
            @SelectSlot3.canceled -= instance.OnSelectSlot3;
            @SelectSlot4.started -= instance.OnSelectSlot4;
            @SelectSlot4.performed -= instance.OnSelectSlot4;
            @SelectSlot4.canceled -= instance.OnSelectSlot4;
            @SelectSlot5.started -= instance.OnSelectSlot5;
            @SelectSlot5.performed -= instance.OnSelectSlot5;
            @SelectSlot5.canceled -= instance.OnSelectSlot5;
            @SelectSlot6.started -= instance.OnSelectSlot6;
            @SelectSlot6.performed -= instance.OnSelectSlot6;
            @SelectSlot6.canceled -= instance.OnSelectSlot6;
            @SelectSlot7.started -= instance.OnSelectSlot7;
            @SelectSlot7.performed -= instance.OnSelectSlot7;
            @SelectSlot7.canceled -= instance.OnSelectSlot7;
            @SelectSlot8.started -= instance.OnSelectSlot8;
            @SelectSlot8.performed -= instance.OnSelectSlot8;
            @SelectSlot8.canceled -= instance.OnSelectSlot8;
            @SelectSlot9.started -= instance.OnSelectSlot9;
            @SelectSlot9.performed -= instance.OnSelectSlot9;
            @SelectSlot9.canceled -= instance.OnSelectSlot9;
            @SelectSlot10.started -= instance.OnSelectSlot10;
            @SelectSlot10.performed -= instance.OnSelectSlot10;
            @SelectSlot10.canceled -= instance.OnSelectSlot10;
            @ToggleInventory.started -= instance.OnToggleInventory;
            @ToggleInventory.performed -= instance.OnToggleInventory;
            @ToggleInventory.canceled -= instance.OnToggleInventory;
            @Exit.started -= instance.OnExit;
            @Exit.performed -= instance.OnExit;
            @Exit.canceled -= instance.OnExit;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IGameplay_UIActions instance)
        {
            if (m_Wrapper.m_Gameplay_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplay_UIActions instance)
        {
            foreach (var item in m_Wrapper.m_Gameplay_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Gameplay_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Gameplay_UIActions @Gameplay_UI => new Gameplay_UIActions(this);

    // Dialogue
    private readonly InputActionMap m_Dialogue;
    private List<IDialogueActions> m_DialogueActionsCallbackInterfaces = new List<IDialogueActions>();
    private readonly InputAction m_Dialogue_Continue;
    public struct DialogueActions
    {
        private @Controls m_Wrapper;
        public DialogueActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Continue => m_Wrapper.m_Dialogue_Continue;
        public InputActionMap Get() { return m_Wrapper.m_Dialogue; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DialogueActions set) { return set.Get(); }
        public void AddCallbacks(IDialogueActions instance)
        {
            if (instance == null || m_Wrapper.m_DialogueActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DialogueActionsCallbackInterfaces.Add(instance);
            @Continue.started += instance.OnContinue;
            @Continue.performed += instance.OnContinue;
            @Continue.canceled += instance.OnContinue;
        }

        private void UnregisterCallbacks(IDialogueActions instance)
        {
            @Continue.started -= instance.OnContinue;
            @Continue.performed -= instance.OnContinue;
            @Continue.canceled -= instance.OnContinue;
        }

        public void RemoveCallbacks(IDialogueActions instance)
        {
            if (m_Wrapper.m_DialogueActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDialogueActions instance)
        {
            foreach (var item in m_Wrapper.m_DialogueActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DialogueActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DialogueActions @Dialogue => new DialogueActions(this);
    public interface IGameplayActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
    public interface IGameplay_UIActions
    {
        void OnScrollSlots(InputAction.CallbackContext context);
        void OnSelectSlot1(InputAction.CallbackContext context);
        void OnSelectSlot2(InputAction.CallbackContext context);
        void OnSelectSlot3(InputAction.CallbackContext context);
        void OnSelectSlot4(InputAction.CallbackContext context);
        void OnSelectSlot5(InputAction.CallbackContext context);
        void OnSelectSlot6(InputAction.CallbackContext context);
        void OnSelectSlot7(InputAction.CallbackContext context);
        void OnSelectSlot8(InputAction.CallbackContext context);
        void OnSelectSlot9(InputAction.CallbackContext context);
        void OnSelectSlot10(InputAction.CallbackContext context);
        void OnToggleInventory(InputAction.CallbackContext context);
        void OnExit(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
    public interface IDialogueActions
    {
        void OnContinue(InputAction.CallbackContext context);
    }
}
